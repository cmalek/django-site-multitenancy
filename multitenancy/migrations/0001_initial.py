# Generated by Django 3.2.9 on 2022-01-08 19:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import multitenancy.managers
import multitenancy.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_domain', models.CharField(blank=True, default=None, help_text="What domain name do you prefer people use for this site? <br>If set, this value must match a previously saved Site Alias. If left blank, this Site's canonical domain will be used, instead.", max_length=100, null=True, validators=[multitenancy.validators.PreferredHostnameValidator], verbose_name='Preferred Domain')),
                ('is_root_site', models.BooleanField(default=False, help_text='If true, this site will host only the admin interface for managing other sites.', verbose_name='Is Root Site')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tenant', to='sites.site')),
            ],
            options={
                'verbose_name': 'tenant',
                'verbose_name_plural': 'tenants',
                'db_table': 'multitenancy_tenant',
                'ordering': ('site',),
            },
            managers=[
                ('objects', multitenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='TenantGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_group', to='auth.group')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multitenancy_tenantgroups', related_query_name='multitenancy_tenantgroups', to='multitenancy.tenant')),
            ],
            options={
                'verbose_name': 'tenant group',
                'verbose_name_plural': 'tenant groups',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('tenant_objects', multitenancy.managers.TenantSpecificManager()),
            ],
        ),
        migrations.CreateModel(
            name='TenantMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_membership', to='multitenancy.tenant')),
            ],
            options={
                'verbose_name': 'tenant membership',
                'verbose_name_plural': 'tenant memberships',
            },
        ),
        migrations.CreateModel(
            name='UserTenantProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_groups', models.ManyToManyField(related_name='user_tenant_profiles', to='multitenancy.TenantGroup')),
                ('tenants', models.ManyToManyField(through='multitenancy.TenantMembership', to='multitenancy.Tenant')),
            ],
            options={
                'verbose_name': 'user tenant profile',
                'verbose_name_plural': 'user tenant profiles',
            },
        ),
        migrations.AddField(
            model_name='tenantmembership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_membership', to='multitenancy.usertenantprofile'),
        ),
        migrations.CreateModel(
            name='SiteAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(error_messages={'unique': 'This domain name is already in use by another Site.'}, max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$', 'Please enter a valid domain name, e.g. example.com.'), multitenancy.validators.HostnameValidator(), multitenancy.validators.AliasValidator()])),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='multitenancy.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Site Alias',
                'verbose_name_plural': 'Site Aliases',
            },
        ),
        migrations.AlterUniqueTogether(
            name='tenantmembership',
            unique_together={('tenant', 'user')},
        ),
    ]
